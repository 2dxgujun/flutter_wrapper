#!/usr/bin/env sh

##############################################################################
##
##  Flutter start up script for UN*X
##
##  Source: https://github.com/passsy/flutter_wrapper
##
##  Use this flutter wrapper to bundle flutter within your project to make
##  sure everybody builds with the same version. Put `flutterw` into the root
##  of your flutter project and execute it. It will download all dependencies
##  automatically when calling it.
##
##  Inspired by gradle-wrapper.
##
##############################################################################


# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

FLUTTER_DIR_NAME='.flutter'
FLUTTER_DIR="$APP_HOME/$FLUTTER_DIR_NAME"

# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
  cd "$(dirname "$0")"
fi

# Check if flutter executable exists, if not fetch submodule
if [ ! -f "$FLUTTER_DIR/bin/flutter" ]; then

  # Add flutter as submodule and pin that specific version
  git submodule update --init .flutter

  # Show the status of the submodules. This will print the SHA-1 of the currently checked out commit for each submodule, along with the submodule path and the output of git describe for the SHA-1. Each SHA-1 will possibly be prefixed with - if the submodule is not initialized, + if the currently checked out submodule commit does not match the SHA-1 found in the index of the containing repository and U if the submodule has merge conflicts.
fi


status=`git submodule | grep .flutter`

# Fix not initialized flutter submodule
if [[ $status = *"-"* ]]; then
  git submodule update --init .flutter
fi

# Print hint when flutter is most likely using the wrong verison.
MISSING_UPDATE_ERROR="\n!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!\n\nYour Flutter version differs from the one in the\ngit repo. To fix this run:\n\ngit submodule update .flutter\n\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"

if [[ $status = *"+"* ]]; then
  echo "$MISSING_UPDATE_ERROR"
fi

# Wrapper tasks done, call flutter binay with all args
set -e
"$FLUTTER_DIR/bin/flutter" "$@"

# Print again for commands with long output
# Print hint when flutter is most likely using the wrong verison.
if [[ $status = *"+"* ]]; then
  echo "$MISSING_UPDATE_ERROR"
fi
